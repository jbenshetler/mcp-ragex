name: Build Base Docker Image

on:
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if requirements unchanged'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  
  # Run weekly on Sunday at midnight UTC
  schedule:
    - cron: '0 0 * * 0'
  
  # Trigger on dependency changes
  push:
    branches: [main]
    paths:
      - 'requirements.txt'
      - 'docker/base.Dockerfile'
      - '.github/workflows/docker-build-base.yml'

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}-base

jobs:
  check-changes:
    name: Check if rebuild needed
    runs-on: ubuntu-latest
    outputs:
      needs_rebuild: ${{ steps.check.outputs.rebuild }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if rebuild needed
      id: check
      run: |
        # Always rebuild on schedule or manual trigger with force
        if [[ "${{ github.event_name }}" == "schedule" ]] || \
           [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.force_rebuild }}" == "true" ]]; then
          echo "rebuild=true" >> $GITHUB_OUTPUT
          echo "Rebuild needed: scheduled or forced"
        # Check if files changed
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "rebuild=true" >> $GITHUB_OUTPUT
          echo "Rebuild needed: dependency files changed"
        else
          echo "rebuild=false" >> $GITHUB_OUTPUT
          echo "No rebuild needed"
        fi

  build-base:
    name: Build and Push Base Image
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.needs_rebuild == 'true'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate date tag
      id: date
      run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ steps.date.outputs.date }}
          type=sha,prefix={{branch}}-,format=short
          
    - name: Build and push base image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/base.Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ steps.date.outputs.date }}
          VCS_REF=${{ github.sha }}
          
    - name: Create summary
      run: |
        echo "## Base Image Built Successfully ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tags Published" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "Application images will automatically use this new base." >> $GITHUB_STEP_SUMMARY
        
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: build-base
    if: failure()
    
    steps:
    - name: Create issue on failure
      uses: actions/github-script@v7
      with:
        script: |
          const date = new Date().toISOString().split('T')[0];
          const title = `Base Image Build Failed - ${date}`;
          const body = `The base image build failed on ${date}.
          
          **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
          **Triggered by:** ${context.eventName}
          
          Please investigate and fix the build.`;
          
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'docker,base-image'
          });
          
          const existingIssue = issues.data.find(issue => issue.title === title);
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['docker', 'base-image', 'automated']
            });
          }