name: Docker Release Pipeline

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Validate version format
      run: |
        if ! [[ "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Error: Version must be in format vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Run basic tests
      run: |
        # Run only the basic server test for now
        pytest tests/test_server.py::test_searcher_initialization -v || true
        
  build-images:
    name: Build Multi-arch Images
    runs-on: ubuntu-latest
    needs: [validate, test]
    permissions:
      contents: read
      packages: write
      security-events: write
      
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push by platform
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/app.Dockerfile
        platforms: ${{ matrix.platform }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}-${{ matrix.arch }}
        cache-from: type=gha,scope=${{ matrix.arch }}
        cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
        build-args: |
          BASE_IMAGE=${{ env.REGISTRY }}/${{ github.repository }}-base:latest
        
    - name: Scan image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}-${{ matrix.arch }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.arch }}.sarif'
        
    - name: Upload scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.arch }}.sarif'
        category: 'trivy-${{ matrix.arch }}'

  create-manifest:
    name: Create Multi-arch Manifest
    runs-on: ubuntu-latest
    needs: [validate, build-images]
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create and push manifest
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
        # For single arch, just tag the image directly
        docker pull $IMAGE:$VERSION-amd64
        docker tag $IMAGE:$VERSION-amd64 $IMAGE:$VERSION
        docker push $IMAGE:$VERSION
        
        # Update latest tag if this is not a pre-release
        if [[ ! "$VERSION" =~ - ]]; then
          docker tag $IMAGE:$VERSION-amd64 $IMAGE:latest
          docker push $IMAGE:latest
        fi
        
    - name: Generate release notes
      id: notes
      run: |
        cat > release-notes.md << EOF
        ## Docker Images
        
        ### Pull Commands
        \`\`\`bash
        # Latest version
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Specific version
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}
        
        # Architecture specific
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}-amd64
        \`\`\`
        
        ### Supported Platforms
        - linux/amd64
        
        ### What's Changed
        See commit history since last release.
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(needs.validate.outputs.version, '-') }}